import os
import json
import sys
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

import database as db
from config_fix import RecruiterStates, RECRUITER_BOT_TOKEN

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize database
db.init_db()

# Helper functions
async def send_main_menu(update, context, edit=False):
    """Send the main menu with options for the recruiter"""
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—Ä–∏–∫", callback_data="view_metrics")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ï—Å–ª–∏ edit=True –∏ –µ—Å—Ç—å callback_query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if edit and hasattr(update, 'callback_query') and update.callback_query:
        try:
            await update.callback_query.edit_message_text(
                "–ü–∞–Ω–µ–ª—å —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            return RecruiterStates.MAIN_MENU
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.effective_message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return RecruiterStates.MAIN_MENU

# Command handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    user_id = update.effective_user.id
    
    # Register user as a recruiter
    db.register_recruiter(
        user_id, 
        update.effective_user.username,
        update.effective_user.first_name,
        update.effective_user.last_name
    )
    
   
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    return await send_main_menu(update, context, edit=True)

# Callback query handlers
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button clicks from the inline keyboard."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "view_metrics":
        # Get metrics from database
        metrics = db.get_metrics()
        
        # Format metrics into a readable message
        message = "üìä **–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–π–º–∞:**\n\n"
        
        # Total users who started
        message += f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {metrics['total_candidates']}\n\n"
        
        # Test metrics
        message += "üìù **–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ—Å—Ç–∞–º:**\n"
        
        if metrics['test_stats']:
            for test_type, data in metrics['test_stats'].items():
                # Make test name more readable
                test_name = test_type.replace('_', ' ').title()
                if test_type == 'primary_test':
                    test_name = "–¢–µ—Å—Ç –ø–æ –ø–µ—Ä–≤–∏—á–Ω–æ–º—É —Ñ–∞–π–ª—É"
                elif test_type == 'stopwords_test':
                    test_name = "–¢–µ—Å—Ç –° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å"
                elif test_type == 'logic_test':
                    test_name = "–¢–µ—Å—Ç –Ω–∞ –ª–æ–≥–∏–∫—É"
                elif test_type == 'practice_test':
                    test_name = "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ"
                elif test_type == 'interview_prep_test':
                    test_name = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é"
                    
                message += f"‚Ä¢ {test_name}:\n"
                message += f"  - –ü—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç: {data['total_submitted']}\n"
                message += f"  - –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏: {data['passed']}\n"
        else:
            message += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–µ—Å—Ç–∞–º\n"
        
        # Interview requests
        message += f"\nüë• –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ: {metrics['interview_requests']}"
        
        # Add back button
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
        try:
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Error editing message for metrics view: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        return RecruiterStates.MAIN_MENU
    
    elif query.data.startswith("approve_submission_") or query.data.startswith("reject_submission_"):
        submission_id = int(query.data.split("_")[2])
        status = "approved" if query.data.startswith("approve_submission_") else "rejected"
        
        # Ask for feedback
        context.user_data["current_submission_id"] = submission_id
        context.user_data["submission_status"] = status
        
        await query.message.reply_text(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {'(—á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ —Ä–µ—à–µ–Ω–∏–∏)' if status == 'approved' else '(—á—Ç–æ –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)'}:"
        )
        
        return "REVIEW_FEEDBACK"
    
    elif query.data.startswith("approve_interview_") or query.data.startswith("reject_interview_"):
        request_id = int(query.data.split("_")[2])
        status = "approved" if query.data.startswith("approve_interview_") else "rejected"
        
        # Ask for response
        context.user_data["current_request_id"] = request_id
        context.user_data["request_status"] = status
        
        if status == "approved":
            await query.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è (—Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ç.–¥.):"
            )
        else:
            await query.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ:"
            )
        
        return "INTERVIEW_RESPONSE"
    
    elif query.data == "interview_requests":
        # Get pending interview requests
        requests = db.get_pending_interview_requests()
        
        if not requests:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await query.edit_message_text(
                    "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
                )
                return RecruiterStates.MAIN_MENU
            except Exception as e:
                logger.error(f"Error editing message: {e}")
                await query.message.reply_text(
                    "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
                )
                return RecruiterStates.MAIN_MENU
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å—ã, —Ç–æ–∂–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤
        try:
            requests_text = "–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ:\n\n"
            for request in requests:
                requests_text += (
                    f"ID: {request['id']}\n"
                    f"–ö–∞–Ω–¥–∏–¥–∞—Ç: {request['candidate_name']}\n"
                    f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å: {request['preferred_day']}\n"
                    f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {request['preferred_time']}\n\n"
                )
            
            keyboard = []
            for request in requests:
                keyboard.append([
                    InlineKeyboardButton(
                        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å #{request['id']}", 
                        callback_data=f"approve_interview_{request['id']}"
                    )
                ])
                keyboard.append([
                    InlineKeyboardButton(
                        f"–û—Ç–∫–ª–æ–Ω–∏—Ç—å #{request['id']}", 
                        callback_data=f"reject_interview_{request['id']}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                requests_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return RecruiterStates.SCHEDULE_INTERVIEW
        except Exception as e:
            logger.error(f"Error editing message for interview requests: {e}")
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await query.message.reply_text("–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ:")
            
            for request in requests:
                keyboard = [
                    [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_interview_{request['id']}")],
                    [InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_interview_{request['id']}")],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.message.reply_text(
                    f"ID: {request['id']}\n"
                    f"–ö–∞–Ω–¥–∏–¥–∞—Ç: {request['candidate_name']}\n"
                    f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å: {request['preferred_day']}\n"
                    f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {request['preferred_time']}",
                    reply_markup=reply_markup
                )
            
            return RecruiterStates.SCHEDULE_INTERVIEW
        
    if query.data.startswith("view_submission_"):
        submission_id = int(query.data.split("_")[2])
        
        # Store submission ID in context for future reference
        context.user_data["current_submission_id"] = submission_id
        
        # Get submission details from database
        submissions = db.get_pending_submissions()
        submission = next((s for s in submissions if s["id"] == submission_id), None)
        
        if not submission:
            await query.message.reply_text("–ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            return await send_main_menu(update, context, edit=True)
        
        # Download and forward the file
        file_id = submission["submission_data"].get("file_id")
        if file_id:
            file = await context.bot.get_file(file_id)
            await query.message.reply_document(file.file_id, caption=f"–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç {submission['candidate_name']} (ID: {submission_id})")
        
        # Provide options to approve or reject
        keyboard = [
            [InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_submission_{submission_id}")],
            [InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_submission_{submission_id}")],
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="review_tests")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
            f"–ö–∞–Ω–¥–∏–¥–∞—Ç: {submission['candidate_name']}\n"
            f"ID –∑–∞—è–≤–∫–∏: {submission_id}",
            reply_markup=reply_markup
        )
        
        return RecruiterStates.REVIEW_TEST
    
    elif query.data == "back_to_menu":
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–≤—Ä–∞—â–∞—è –µ–≥–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return await send_main_menu(update, context, edit=True)
    
    # Default case - return to main menu
    return await send_main_menu(update, context, edit=True)

async def handle_submission_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle feedback for a test submission"""
    # Get submission details from context
    submission_id = context.user_data.get("current_submission_id")
    status = context.user_data.get("submission_status")
    feedback = update.message.text
    
    if not submission_id or not status:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        return await send_main_menu(update, context, edit=True)
    
    # Update submission status in database
    result = db.update_test_submission(submission_id, status, feedback)
    
    if result:
        # Import the function from candidate_bot to send notification
        from candidate_bot import handle_test_feedback
        
        # Send notification to candidate
        await handle_test_feedback(result["user_id"], submission_id, status, feedback)
        
        await update.message.reply_text(
            f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—É. –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {status}."
        )
    else:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.")
    
    return await send_main_menu(update, context, edit=True)

async def handle_interview_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle response for an interview request"""
    # Get request details from context
    request_id = context.user_data.get("current_request_id")
    status = context.user_data.get("request_status")
    response = update.message.text
    
    if not request_id or not status:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        return await send_main_menu(update, context, edit=True)
    
    # Update request status in database
    result = db.update_interview_request(request_id, status, response)
    
    if result:
        # Import the function from candidate_bot to send notification
        from candidate_bot import handle_interview_response
        
        # Send notification to candidate
        await handle_interview_response(result["user_id"], request_id, status, response)
        
        await update.message.reply_text(
            f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç—É. –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞: {status}."
        )
    else:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞.")
    
    return await send_main_menu(update, context, edit=True)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /help is issued."""
    help_text = (
        "–ë–æ—Ç –¥–ª—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤ - –ø–æ–º–æ—â—å\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."
    )
    await update.message.reply_text(help_text)
    return RecruiterStates.MAIN_MENU

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show the main menu when the command /menu is issued."""
    return await send_main_menu(update, context, edit=True)

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle unknown commands."""
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )
    return RecruiterStates.MAIN_MENU

async def unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle unknown messages."""
    # If we're expecting feedback or response, don't treat it as unknown
    if context.user_data.get("current_submission_id") and context.user_data.get("submission_status"):
        return await handle_submission_feedback(update, context)
    
    if context.user_data.get("current_request_id") and context.user_data.get("request_status"):
        return await handle_interview_response(update, context)
    
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )
    return RecruiterStates.MAIN_MENU

def main():
    """Start the bot."""
    # Create the Application
    application = Application.builder().token(RECRUITER_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler (–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            RecruiterStates.MAIN_MENU: [
                CallbackQueryHandler(button_click, pattern="^(?!(view_metrics|back_to_menu)$).*$"),  # –ò—Å–∫–ª—é—á–∞–µ–º view_metrics –∏ back_to_menu
            ],
            RecruiterStates.REVIEW_TEST: [
                CallbackQueryHandler(button_click),
            ],
            "REVIEW_FEEDBACK": [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_submission_feedback),
            ],
            RecruiterStates.SCHEDULE_INTERVIEW: [
                CallbackQueryHandler(button_click),
            ],
            "INTERVIEW_RESPONSE": [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_interview_response),
            ],
        },
        fallbacks=[
            MessageHandler(filters.COMMAND, unknown_command),
            MessageHandler(filters.ALL, unknown_message),
        ],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler (–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    application.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /menu –≤–Ω–µ ConversationHandler
    application.add_handler(CommandHandler("menu", menu_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help –≤–Ω–µ ConversationHandler
    application.add_handler(CommandHandler("help", help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—Ä–∏–∫", –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω–µ ConversationHandler
    application.add_handler(CallbackQueryHandler(
        lambda update, context: button_click(update, context), 
        pattern="^view_metrics$"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥", –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω–µ ConversationHandler
    application.add_handler(CallbackQueryHandler(
        lambda update, context: send_main_menu(update, context, edit=True), 
        pattern="^back_to_menu$"
    ))
    
    # Start the Bot
    application.run_polling()

if __name__ == '__main__':
    main()
