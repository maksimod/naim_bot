import logging
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import database as db
from config import CandidateStates, CANDIDATE_BOT_TOKEN, RECRUITER_BOT_TOKEN
from handlers.candidate_handlers import (
    send_main_menu, handle_message, handle_test_answer,
    handle_where_to_start, start_stopwords_test, handle_stopword_answer,
    next_stopword_question, begin_stopwords_test
)
from handlers.button_handlers import button_click

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not db.user_exists(user_id):
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        db.create_user(user_id, update.effective_user.username)
        
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —ç—Ç–∞–ø–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        db.unlock_stage(user_id, "about_company")
        db.unlock_stage(user_id, "primary_file")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    return await send_main_menu(update, context)

async def handle_interview_request(user_id, preferred_day, preferred_time):
    """Handle a new interview request and notify the recruiter"""
    # Save the interview request
    request_id = db.save_interview_request(user_id, preferred_day, preferred_time)
    
    # Get user info for notification
    user_info = db.send_interview_notification_to_recruiter(user_id, preferred_day, preferred_time)
    
    if user_info and request_id:
        # Create recruiter bot instance to send notification
        try:
            from telegram import Bot
            recruiter_bot = Bot(token=RECRUITER_BOT_TOKEN)
            
            # Format notification message
            notification = (
                f"üì£ *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!*\n\n"
                f"üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: @{user_info['username']}\n"
                f"üìÖ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å: {user_info['preferred_day']}\n"
                f"‚è∞ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {user_info['preferred_time']}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
            )
            
            # Send to recruiter channel/chat (replace with actual admin user ID or channel ID)
            # This would typically be a specific admin user or chat where recruiters monitor
            admin_user_id = os.getenv("ADMIN_USER_ID", "")  # Get from environment variables
            
            if admin_user_id and admin_user_id.isdigit():
                await recruiter_bot.send_message(
                    chat_id=int(admin_user_id),
                    text=notification,
                    parse_mode='Markdown'
                )
                logger.info(f"Interview request notification sent to admin for user {user_id}")
            else:
                logger.warning("Admin user ID not configured, could not send notification")
                
        except Exception as e:
            logger.error(f"Error sending interview notification: {e}")
    
    return request_id

async def handle_test_feedback(user_id, submission_id, status, feedback):
    """Handle test feedback from recruiter and notify the candidate"""
    # This function is imported and called from recruiter_bot.py
    # after a test submission is reviewed
    
    from telegram import Bot
    
    try:
        # Create a bot instance
        bot = Bot(token=CANDIDATE_BOT_TOKEN)
        
        # Decide on message based on status
        if status == "approved":
            message = (
                "üéâ *–í–∞—à–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ!*\n\n"
                f"–û—Ç–∑—ã–≤ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞: {feedback}\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–æ–≤."
            )
        else:
            message = (
                "‚ùó *–í–∞—à–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –¥–æ—Ä–∞–±–æ—Ç–∫–µ*\n\n"
                f"–û—Ç–∑—ã–≤ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞: {feedback}\n\n"
                "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
            )
        
        # Send the message to the candidate
        await bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode='Markdown'
        )
        
        return True
    except Exception as e:
        logger.error(f"Error sending test feedback to user {user_id}: {e}")
        return False

async def handle_interview_response(user_id, request_id, status, response):
    """Handle interview response from recruiter and notify the candidate"""
    # This function is imported and called from recruiter_bot.py
    # after an interview request is processed
    
    from telegram import Bot
    
    try:
        # Create a bot instance
        bot = Bot(token=CANDIDATE_BOT_TOKEN)
        
        # Decide on message based on status
        if status == "approved":
            message = (
                "‚úÖ *–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!*\n\n"
                f"–î–µ—Ç–∞–ª–∏: {response}\n\n"
                "–•–æ—Ä–æ—à–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é!"
            )
        else:
            message = (
                "‚ùå *–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏*\n\n"
                f"–û—Ç–≤–µ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞: {response}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ."
            )
        
        # Send the message to the candidate
        await bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode='Markdown'
        )
        
        return True
    except Exception as e:
        logger.error(f"Error sending interview response to user {user_id}: {e}")
        return False

def main():
    """Start the bot."""
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
    application = ApplicationBuilder().token(CANDIDATE_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", send_main_menu))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é
    application.add_handler(CallbackQueryHandler(send_main_menu, pattern="^back_to_menu$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å"
    application.add_handler(CallbackQueryHandler(handle_where_to_start, pattern="^where_to_start$"))
    application.add_handler(CallbackQueryHandler(start_stopwords_test, pattern="^start_stopwords_test$"))
    application.add_handler(CallbackQueryHandler(begin_stopwords_test, pattern="^begin_stopwords_test$"))
    application.add_handler(CallbackQueryHandler(next_stopword_question, pattern="^next_stopword_question$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    application.add_handler(CallbackQueryHandler(handle_test_answer, pattern="^answer_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
    application.add_handler(CallbackQueryHandler(button_click, pattern="^interview_day_"))
    application.add_handler(CallbackQueryHandler(button_click, pattern="^interview_time_"))
    application.add_handler(CallbackQueryHandler(button_click, pattern="^confirm_interview_request$"))
    
    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    application.add_handler(CallbackQueryHandler(button_click))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    db.init_db()
    main()
