import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import database as db
from config import CandidateStates
from utils.helpers import load_text_content, load_test_questions
from utils.chatgpt_helpers import verify_test_completion

logger = logging.getLogger(__name__)

async def send_main_menu(update, context, message=None, edit=False):
    """Send the main menu with appropriate buttons based on user's unlocked stages"""
    user_id = update.effective_user.id
    unlocked_stages = db.get_user_unlocked_stages(user_id)
    
    # Get test results for emoji display
    user_test_results = db.get_user_test_results(user_id)
    
    # Define all menu options with their locked/unlocked status and test results
    menu_options = [
        ("about_company", "üü¢ –£–∑–Ω–∞—Ç—å –æ –∫–æ–º–ø–∞–Ω–∏–∏"),
        ("primary_file", "üü¢ –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ñ–∞–π–ª"),
        ("where_to_start", "üî¥ –° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å"),
        ("preparation_materials", "üî¥ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"),
        ("take_test", "üî¥ –ü—Ä–æ–π—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ"),
        ("interview_prep", "üî¥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é"),
        ("schedule_interview", "üî¥ –ü—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ")
    ]
    
    # Create keyboard with unlocked buttons and test status indicators
    keyboard = []
    for stage_id, stage_name in menu_options:
        # Special handling for primary_file to show test result status
        if stage_id == "primary_file" and "primary_test" in user_test_results:
            if user_test_results["primary_test"]:
                # Test passed
                stage_name = stage_name.replace("üü¢", "‚úÖ")  # Replace green circle with checkmark
            else:
                # Test failed
                stage_name = stage_name.replace("üü¢", "‚ùå")  # Replace green circle with X mark
            keyboard.append([InlineKeyboardButton(stage_name, callback_data=stage_id)])
            continue  # Skip the rest of the loop for this item
            
        # Special handling for where_to_start - unlock after primary test regardless of result
        if stage_id == "where_to_start":
            # Check if there's a test result for primary_test
            if "primary_test" in user_test_results:
                # If there's a test result, this stage should be unlocked regardless of pass/fail
                if stage_id not in unlocked_stages:
                    db.unlock_stage(user_id, "where_to_start")
                    unlocked_stages = db.get_user_unlocked_stages(user_id)  # Refresh unlocked stages
                
                # Check if there's a test result for this stage
                if "where_to_start_test" in user_test_results:
                    if user_test_results["where_to_start_test"]:
                        # Test passed
                        stage_name = stage_name.replace("üî¥", "‚úÖ")  # Replace red circle with checkmark
                    else:
                        # Test failed
                        stage_name = stage_name.replace("üî¥", "‚ùå")  # Replace red circle with X mark
                elif stage_id in unlocked_stages:
                    # No test result - show as unlocked
                    stage_name = stage_name.replace("üî¥", "üü¢")  # Replace red circle with green circle
                
                keyboard.append([InlineKeyboardButton(stage_name, callback_data=stage_id)])
                continue  # Skip the rest of the loop for this item
        
        # Special handling for preparation_materials - unlock after where_to_start_test regardless of result
        if stage_id == "preparation_materials":
            # Check if there's a test result for where_to_start_test
            if "where_to_start_test" in user_test_results:
                # If there's a test result, this stage should be unlocked regardless of pass/fail
                if stage_id not in unlocked_stages:
                    db.unlock_stage(user_id, "preparation_materials")
                    unlocked_stages = db.get_user_unlocked_stages(user_id)  # Refresh unlocked stages
                
                if stage_id in unlocked_stages:
                    # Stage unlocked - show as green circle (not checkmark)
                    stage_name = stage_name.replace("üî¥", "üü¢")  # Replace red circle with green circle
            
            keyboard.append([InlineKeyboardButton(stage_name, callback_data=stage_id)])
            continue  # Skip the rest of the loop for this item
        
        # Check if there's a test result for this stage if applicable
        test_name = None
        if stage_id == "take_test":
            test_name = "preparation_test"
        
        # Check if there's a test result for this stage
        if test_name and test_name in user_test_results:
            # Test was taken - show ‚úÖ for passed or ‚ùå for failed
            if user_test_results[test_name]:
                # Test passed
                stage_name = stage_name.replace("üî¥", "‚úÖ")  # Replace red circle with checkmark
            else:
                # Test failed
                stage_name = stage_name.replace("üî¥", "‚ùå")  # Replace red circle with X mark
            keyboard.append([InlineKeyboardButton(stage_name, callback_data=stage_id)])
        else:
            # No test result - show regular lock/unlock status
            if stage_id in unlocked_stages:
                stage_name = stage_name.replace("üî¥", "üü¢")  # Replace red circle with green circle
            keyboard.append([InlineKeyboardButton(stage_name, callback_data=stage_id)])
    
    # Add contact developers button
    keyboard.append([InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏", callback_data="contact_developers")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # If a custom message is provided, use it, otherwise use the default menu header
    if not message:
        message = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    
    # Always try to edit the existing message first if we have a callback query and edit=True
    if edit and hasattr(update, 'callback_query') and update.callback_query:
        try:
            # Try to edit the current message
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=reply_markup
            )
            return CandidateStates.MAIN_MENU
        except Exception as e:
            logger.error(f"Error editing message via callback query: {e}")
            # Fall through to other methods if this fails
    
    # Try to edit the last main menu message if we have its ID
    if edit and context.user_data.get("main_menu_message_id"):
        try:
            # Try to edit the existing menu message
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["main_menu_message_id"],
                text=message,
                reply_markup=reply_markup
            )
            return CandidateStates.MAIN_MENU
        except Exception as e:
            logger.error(f"Error editing main menu message: {e}")
            # If editing fails, continue to send a new message
    
    # Send a new message if editing is not possible or not requested
    menu_message = await update.effective_message.reply_text(message, reply_markup=reply_markup)
    context.user_data["main_menu_message_id"] = menu_message.message_id
    return CandidateStates.MAIN_MENU

async def send_test_question(update, context, edit_message=False):
    """Send a test question to the user with smart message updates"""
    test_data = context.user_data.get("test_data", [])
    current_question = context.user_data.get("current_question", 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not test_data:
        await update.effective_chat.send_message("–û—à–∏–±–∫–∞: —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return await send_main_menu(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—à–ª–∏ –ª–∏ –º—ã –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    if current_question >= len(test_data):
        return await handle_test_completion(update, context)
    
    question = test_data[current_question]
    question_text = f"–í–æ–ø—Ä–æ—Å {current_question + 1} –∏–∑ {len(test_data)}:\n\n{question['question']}"
    
    # Create answers as buttons
    keyboard = []
    for i, answer in enumerate(question['answers']):
        keyboard.append([InlineKeyboardButton(f"{i+1}. {answer}", callback_data=f"answer_{i}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if edit_message and hasattr(update, 'callback_query') and update.callback_query:
        try:
            await update.callback_query.edit_message_text(
                text=question_text,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error editing message for test question: {e}")
            # If editing fails, send as a new message
            message = await update.effective_chat.send_message(
                text=question_text,
                reply_markup=reply_markup
            )
            context.user_data["test_message_id"] = message.message_id
    else:
        # Send as a new message
        message = await update.effective_chat.send_message(
            text=question_text,
            reply_markup=reply_markup
        )
        context.user_data["test_message_id"] = message.message_id

async def handle_test_completion(update, context):
    """Handle the completion of a test and determine if user passed"""
    test_name = context.user_data.get("current_test")
    correct_answers = context.user_data.get("correct_answers", 0)
    test_data = context.user_data.get("test_data", [])
    user_id = update.effective_user.id
    
    if not test_data:
        await update.effective_chat.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return await send_main_menu(update, context)
    
    # Calculate the passing score (50% or more)
    total_questions = len(test_data)
    passing_score = total_questions // 2
    passed = correct_answers > passing_score
    
    # Save test result - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    db.update_test_result(user_id, test_name, passed)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞)
    next_stage = None
    if test_name == "primary_test":
        next_stage = "where_to_start"
    elif test_name == "where_to_start_test":
        next_stage = "preparation_materials"
    elif test_name == "preparation_test":
        next_stage = "take_test"
    
    # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω
    if next_stage:
        db.unlock_stage(user_id, next_stage)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    if passed:
        # –¢–µ–∫—Å—Ç –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        result_message = (
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç!\n\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers} –∏–∑ {total_questions}\n\n"
            f"–°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∞–π–º–∞!"
        )
    else:
        # –¢–µ–∫—Å—Ç –¥–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        result_message = (
            f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: –Ω–µ –ø—Ä–æ–π–¥–µ–Ω.\n\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers} –∏–∑ {total_questions}\n\n"
            f"–û–¥–Ω–∞–∫–æ, —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø –≤—Å–µ —Ä–∞–≤–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –µ—â–µ —Ä–∞–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã."
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∞ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.effective_chat.send_message(
        text=result_message,
        reply_markup=reply_markup
    )
    
    # Clear test data from context
    if "current_test" in context.user_data:
        del context.user_data["current_test"]
    if "test_data" in context.user_data:
        del context.user_data["test_data"]
    if "current_question" in context.user_data:
        del context.user_data["current_question"]
    if "correct_answers" in context.user_data:
        del context.user_data["correct_answers"]
    
    # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Å—Ä–∞–∑—É –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç 
    # –∑–∞—Ö–æ—Ç–µ—Ç—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    return CandidateStates.MAIN_MENU

async def handle_test_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user's answer to a test question"""
    query = update.callback_query
    await query.answer()
    
    test_data = context.user_data.get("test_data", [])
    current_question = context.user_data.get("current_question", 0)
    
    if not test_data or current_question >= len(test_data):
        return await send_main_menu(update, context)
    
    # Parse the answer index from callback data
    try:
        answer_index = int(query.data.split('_')[1])
        question = test_data[current_question]
        is_correct = answer_index == question['correct_index']
        
        if is_correct:
            # Increment correct answers count
            context.user_data["correct_answers"] = context.user_data.get("correct_answers", 0) + 1
            feedback_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        else:
            feedback_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answers'][question['correct_index']]}"
        
        # Show feedback
        await query.edit_message_text(
            text=f"{query.message.text}\n\n{feedback_text}",
            reply_markup=None
        )
        
        # Move to next question after a brief pause
        await asyncio.sleep(2)
        context.user_data["current_question"] = current_question + 1
        return await send_test_question(update, context)
    
    except (ValueError, IndexError, KeyError) as e:
        logger.error(f"Error processing test answer: {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return await send_main_menu(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text messages."""
    # Get current state
    user_id = update.effective_user.id
    message_text = update.message.text
    
    # Handle solution submission
    if context.user_data.get("awaiting_solution_message", False):
        # We are expecting a solution to the AI test
        context.user_data["awaiting_solution_message"] = False  # Reset flag
        
        # Send a processing message
        processing_msg = await update.effective_chat.send_message(
            "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."
        )
        
        try:
            # Verify the solution using ChatGPT
            passed, feedback = await verify_test_completion(message_text)
            
            # Save test result in the database
            db.update_test_result(user_id, "take_test_result", passed)
            
            # Unlock the next stage (interview_prep) regardless of result
            db.unlock_stage(user_id, "interview_prep")
            
            # Create keyboard with button to return to menu
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Remove processing message
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=processing_msg.message_id
            )
            
            # Send feedback
            await update.effective_chat.send_message(
                f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n{feedback}\n\n"
                f"{'‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!' if passed else '‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω.'}\n\n"
                f"–°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é' —Ç–µ–ø–µ—Ä—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Error verifying solution: {e}")
            
            # Remove processing message
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=processing_msg.message_id
                )
            except:
                pass
            
            # Send error message
            await update.effective_chat.send_message(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
        
        return CandidateStates.MAIN_MENU
    
    # Default: return to main menu
    return await send_main_menu(update, context)
