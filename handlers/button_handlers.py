import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import database as db
from config import CandidateStates
from utils.helpers import load_text_content, load_test_questions
from handlers.candidate_handlers import send_main_menu, send_test_question

logger = logging.getLogger(__name__)

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button clicks from the inline keyboard."""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    unlocked_stages = db.get_user_unlocked_stages(user_id)
    
    # Try to delete the content message if it exists and we're clicking on a menu option
    # (except back_to_menu which handles this separately)
    if "content_message_id" in context.user_data and query.data != "back_to_menu":
        try:
            # Delete the content message
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["content_message_id"]
            )
            # Remove the content message ID from user data
            del context.user_data["content_message_id"]
        except Exception as e:
            logger.error(f"Error deleting content message: {e}")
    
    if query.data == "locked":
        # Use edit_message_text to update the existing message instead of sending a new one
        try:
            await query.edit_message_text(
                "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç—Ç–∞–ø—ã, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.",
                reply_markup=query.message.reply_markup
            )
        except Exception as e:
            logger.error(f"Error updating message: {e}")
            # Don't send a new message, just return to main menu
            return await send_main_menu(update, context, edit=True)
        return CandidateStates.MAIN_MENU
    
    # Menu options with emoji status controlled by send_main_menu
    menu_options = [
        ("about_company", "üü¢ –£–∑–Ω–∞—Ç—å –æ –∫–æ–º–ø–∞–Ω–∏–∏"),
        ("primary_file", "üü¢ –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ñ–∞–π–ª"),
        ("where_to_start", "üî¥ –° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å"),
        ("preparation_materials", "üî¥ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"),
        ("take_test", "üî¥ –ü—Ä–æ–π—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ"),
        ("interview_prep", "üî¥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é"),
        ("schedule_interview", "üî¥ –ü—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ")
    ]
    
    # Handle different menu options
    if query.data == "about_company":
        content = load_text_content("about_company.txt")
        
        # Replace the current menu message with the content
        try:
            # Add back button at the bottom of the content
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Edit the current message (which is the menu) to show the content with back button
            await query.edit_message_text(
                content,
                reply_markup=reply_markup
            )
            
            # Store this message ID as the content message for future reference
            context.user_data["content_message_id"] = query.message.message_id
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            # If editing fails, just return to main menu
            return await send_main_menu(update, context, edit=True)
        
        return CandidateStates.MAIN_MENU
    
    elif query.data == "primary_file":
        # Send the primary file
        content = load_text_content("primary_file.txt")
        
        # Replace the current menu message with the content
        try:
            # Add test and back buttons at the bottom of the content
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ –ø–µ—Ä–≤–∏—á–Ω–æ–º—É —Ñ–∞–π–ª—É", callback_data="primary_test")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Edit the current message (which is the menu) to show the content with test button
            await query.edit_message_text(
                content + "\n\n–¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.",
                reply_markup=reply_markup
            )
            
            # Store this message ID as the content message for future reference
            context.user_data["content_message_id"] = query.message.message_id
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            # If editing fails, just return to main menu
            return await send_main_menu(update, context, edit=True)
        
        return CandidateStates.MAIN_MENU
    
    elif query.data == "primary_test":
        # Delete the content message if it exists
        try:
            if "content_message_id" in context.user_data:
                # Delete the content message
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data["content_message_id"]
                )
                # Remove the content message ID from user data
                del context.user_data["content_message_id"]
        except Exception as e:
            logger.error(f"Error deleting content message: {e}")
        
        # Show warning before starting the test
        warning_message = (
            "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> ‚ö†Ô∏è\n\n" +
            "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏. " +
            "<b>–ï—Å–ª–∏ –≤—ã –Ω–µ –ø—Ä–æ–π–¥–µ—Ç–µ —É—Å–ø–µ—à–Ω–æ —Ö–æ—Ç—è –±—ã –ø–æ–ª–æ–≤–∏–Ω—É –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤, –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.</b>\n\n" +
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç?"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —è –≥–æ—Ç–æ–≤", callback_data="confirm_primary_test")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data="primary_file")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Edit the current message to show the warning
        try:
            await query.edit_message_text(warning_message, reply_markup=reply_markup, parse_mode='HTML')
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            # If editing fails, send as a new message
            await query.message.reply_text(warning_message, reply_markup=reply_markup, parse_mode='HTML')
        
        return CandidateStates.PRIMARY_FILE
        
    elif query.data == "confirm_primary_test":
        # Load test questions
        test_data = load_test_questions("primary_test.json")
        if not test_data:
            await query.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return CandidateStates.MAIN_MENU
        
        # Store test data in context
        context.user_data["current_test"] = "primary_test"
        context.user_data["test_data"] = test_data
        context.user_data["current_question"] = 0
        context.user_data["correct_answers"] = 0
        
        # Send the first question by editing the current message
        try:
            await send_test_question(update, context, edit_message=True)
        except Exception as e:
            logger.error(f"Error editing message for test: {e}")
            # If editing fails, send as a new message
            await send_test_question(update, context, edit_message=False)
        
        return CandidateStates.PRIMARY_TEST
    
    elif query.data == "where_to_start" and "where_to_start" in unlocked_stages:
        content = load_text_content("where_to_start.txt")
        await query.message.reply_text(content)
        
        # Offer to take the test
        keyboard = [[InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="where_to_start_test")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "–ß—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø, –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç.",
            reply_markup=reply_markup
        )
        return CandidateStates.WHERE_TO_START
    
    # Contact developers - FIX: emoji display issue
    elif query.data == "contact_developers":
        # Edit the message to include the return button
        keyboard = [
            [InlineKeyboardButton("üìû –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", url="https://t.me/+iJCNlqsPgO0wN2Yy")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error updating message: {e}")
            await query.message.reply_text(
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=reply_markup
            )
        
        return CandidateStates.MAIN_MENU
    
    # Back to menu from any section
    elif query.data == "back_to_menu":
        # Try to delete the content message if it exists
        try:
            if "content_message_id" in context.user_data:
                # Delete the content message
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data["content_message_id"]
                )
                # Remove the content message ID from user data
                del context.user_data["content_message_id"]
        except Exception as e:
            logger.error(f"Error deleting content message: {e}")
        
        # Return to main menu
        return await send_main_menu(update, context, edit=True)
    
    # Default - return to main menu
    return await send_main_menu(update, context, edit=True)
