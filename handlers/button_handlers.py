import logging
import os
import sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ContextTypes
import database as db
from config import CandidateStates
from utils.helpers import load_text_content, load_test_questions
from handlers.candidate_handlers import send_main_menu, send_test_question
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

logger = logging.getLogger(__name__)

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button clicks from the inline keyboard."""
    query = update.callback_query
    await query.answer()  # Acknowledge the button click
    
    # Get user ID and current state
    user_id = update.effective_user.id
    unlocked_stages = db.get_user_unlocked_stages(user_id)
    
    # Check for admin mode
    admin_mode = context.user_data.get("admin_mode", False)
    
    # If the button click is for a locked stage and admin mode is not active, show a message
    if (query.data in ['where_to_start', 'preparation_materials', 'take_test', 
                      'interview_prep', 'schedule_interview'] and 
                      query.data not in unlocked_stages and 
                      not admin_mode):
        await query.edit_message_text(
            "üîí –≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )
        return CandidateStates.MAIN_MENU
    
    # Try to delete the content message if it exists and we're clicking on a menu option
    # (except back_to_menu which handles this separately)
    if "content_message_id" in context.user_data and query.data != "back_to_menu":
        try:
            # Delete the content message
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["content_message_id"]
            )
            # Remove the content message ID from user data
            del context.user_data["content_message_id"]
        except Exception as e:
            logger.error(f"Error deleting content message: {e}")
    
    if query.data == "locked":
        # Use edit_message_text to update the existing message instead of sending a new one
        try:
            await query.edit_message_text(
                "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç—Ç–∞–ø—ã, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.",
                reply_markup=query.message.reply_markup
            )
        except Exception as e:
            logger.error(f"Error updating message: {e}")
            # Don't send a new message, just return to main menu
            return await send_main_menu(update, context, edit=True)
        return CandidateStates.MAIN_MENU
    
    # Menu options with emoji status controlled by send_main_menu
    menu_options = [
        ("about_company", "üü¢ –£–∑–Ω–∞—Ç—å –æ –∫–æ–º–ø–∞–Ω–∏–∏"),
        ("primary_file", "üü¢ –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ñ–∞–π–ª"),
        ("where_to_start", "üî¥ –° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å"),
        ("preparation_materials", "üî¥ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"),
        ("take_test", "üî¥ –ü—Ä–æ–π—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ"),
        ("interview_prep", "üî¥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é"),
        ("schedule_interview", "üî¥ –ü—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ")
    ]
    
    # Handle different menu options
    if query.data == "about_company":
        content = load_text_content("about_company.txt")
        
        # Replace the current menu message with the content
        try:
            # Add back button at the bottom of the content
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Edit the current message (which is the menu) to show the content with back button
            await query.edit_message_text(
                content,
                reply_markup=reply_markup
            )
            
            # Store this message ID as the content message for future reference
            context.user_data["content_message_id"] = query.message.message_id
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            # If editing fails, just return to main menu
            return await send_main_menu(update, context, edit=True)
        
        return CandidateStates.MAIN_MENU
    
    elif query.data == "primary_file":
        # Send the primary file
        content = load_text_content("primary_file.txt")
        
        # Replace the current menu message with the content
        try:
            # Add test and back buttons at the bottom of the content
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ –ø–µ—Ä–≤–∏—á–Ω–æ–º—É —Ñ–∞–π–ª—É", callback_data="primary_test")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Edit the current message (which is the menu) to show the content with test button
            await query.edit_message_text(
                content + "\n\n–¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.",
                reply_markup=reply_markup
            )
            
            # Store this message ID as the content message for future reference
            context.user_data["content_message_id"] = query.message.message_id
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            # If editing fails, just return to main menu
            return await send_main_menu(update, context, edit=True)
        
        return CandidateStates.MAIN_MENU
    
    elif query.data == "primary_test":
        # –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        # Show warning before starting the test
        warning_message = (
            "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> ‚ö†Ô∏è\n\n" +
            "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏. " +
            "<b>–ï—Å–ª–∏ –≤—ã –Ω–µ –ø—Ä–æ–π–¥–µ—Ç–µ —É—Å–ø–µ—à–Ω–æ —Ö–æ—Ç—è –±—ã –ø–æ–ª–æ–≤–∏–Ω—É –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤, –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.</b>\n\n" +
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç?"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —è –≥–æ—Ç–æ–≤", callback_data="confirm_primary_test")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data="primary_file")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Edit the current message to show the warning
        try:
            await query.edit_message_text(warning_message, reply_markup=reply_markup, parse_mode='HTML')
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            # If editing fails, send as a new message
            await query.message.reply_text(warning_message, reply_markup=reply_markup, parse_mode='HTML')
        
        return CandidateStates.PRIMARY_FILE
    
    elif query.data == "confirm_primary_test":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç
        user_id = update.effective_user.id
        user_test_results = db.get_user_test_results(user_id)
        
        # –ï—Å–ª–∏ —Ç–µ—Å—Ç —É–∂–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω (—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ), –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –ø–µ—Ä–µ—Å–¥–∞–≤–∞—Ç—å
        if "primary_test" in user_test_results:
            await query.edit_message_text(
                "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
            return CandidateStates.MAIN_MENU
            
        # Load test questions
        test_data = load_test_questions("primary_test.json")
        if not test_data:
            await query.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return CandidateStates.MAIN_MENU
        
        # Store test data in context
        context.user_data["current_test"] = "primary_test"
        context.user_data["test_data"] = test_data
        context.user_data["current_question"] = 0
        context.user_data["correct_answers"] = 0
        
        # Send the first question by editing the current message
        try:
            await send_test_question(update, context, edit_message=True)
        except Exception as e:
            logger.error(f"Error editing message for test: {e}")
            # If editing fails, send as a new message
            await send_test_question(update, context, edit_message=False)
        
        return CandidateStates.PRIMARY_TEST
    
    elif (query.data == "where_to_start" and "where_to_start" in unlocked_stages) or admin_mode and query.data == "where_to_start":
        content = load_text_content("where_to_start.txt")
        
        # –í–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="where_to_start_test")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(
                content + "\n\n–ß—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø, –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç.",
                reply_markup=reply_markup
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            context.user_data["content_message_id"] = query.message.message_id
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            return await send_main_menu(update, context, edit=True)
            
        return CandidateStates.WHERE_TO_START
    
    elif query.data == "where_to_start_test":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç
        user_id = update.effective_user.id
        user_test_results = db.get_user_test_results(user_id)
        
        # –ï—Å–ª–∏ —Ç–µ—Å—Ç —É–∂–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω (—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ), –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –ø–µ—Ä–µ—Å–¥–∞–≤–∞—Ç—å
        if "where_to_start_test" in user_test_results:
            await query.edit_message_text(
                "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
            return CandidateStates.MAIN_MENU
        
        # Show warning before starting the test
        warning_message = (
            "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> ‚ö†Ô∏è\n\n" +
            "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏. " +
            "<b>–ï—Å–ª–∏ –≤—ã –Ω–µ –ø—Ä–æ–π–¥–µ—Ç–µ —É—Å–ø–µ—à–Ω–æ —Ö–æ—Ç—è –±—ã –ø–æ–ª–æ–≤–∏–Ω—É –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤, –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.</b>\n\n" +
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç?"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —è –≥–æ—Ç–æ–≤", callback_data="confirm_where_to_start_test")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data="where_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        try:
            await query.edit_message_text(warning_message, reply_markup=reply_markup, parse_mode='HTML')
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            # –¢–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(warning_message, reply_markup=reply_markup, parse_mode='HTML')
            
        return CandidateStates.WHERE_TO_START
    
    elif query.data == "confirm_where_to_start_test":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç
        user_id = update.effective_user.id
        user_test_results = db.get_user_test_results(user_id)
        
        # –ï—Å–ª–∏ —Ç–µ—Å—Ç —É–∂–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω (—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ), –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –ø–µ—Ä–µ—Å–¥–∞–≤–∞—Ç—å
        if "where_to_start_test" in user_test_results:
            await query.edit_message_text(
                "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
            return CandidateStates.MAIN_MENU
        
        # Load test questions
        test_data = load_test_questions("where_to_start_test.json")
        if not test_data:
            try:
                await query.edit_message_text(
                    "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                    ])
                )
            except Exception as e:
                logger.error(f"Error editing message: {e}")
                await query.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return CandidateStates.MAIN_MENU
        
        # Store test data in context
        context.user_data["current_test"] = "where_to_start_test"
        context.user_data["test_data"] = test_data
        context.user_data["current_question"] = 0
        context.user_data["correct_answers"] = 0
        
        # Send the first question by editing the current message
        try:
            await send_test_question(update, context, edit_message=True)
        except Exception as e:
            logger.error(f"Error editing message for test: {e}")
            # If editing fails, send as a new message
            await send_test_question(update, context, edit_message=False)
        
        return CandidateStates.WHERE_TO_START_TEST
    
    # Handler for logic_test menu option
    elif (query.data == "logic_test" and "logic_test" in unlocked_stages) or admin_mode and query.data == "logic_test":
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            docx_path = "materials/logic_test_prepare.docx"
            with open(docx_path, 'rb') as doc:
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=doc,
                    filename="logic_test_prepare.docx",
                    caption="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ç–µ—Å—Ç—É –Ω–∞ –ª–æ–≥–∏–∫—É"
                )
                
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –≤ 5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã —Ñ–∞–π–ª —É—Å–ø–µ–ª –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
            await asyncio.sleep(5)
                
            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ö–ê–ö –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï
            brief_content = (
                "*–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç—É –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ*\n\n"
                "–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è. –û–Ω –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π –∏ "
                "–æ–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –æ–ø–∏—Å–∞–Ω–Ω—ã–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏.\n\n"
                "–û—Å–Ω–æ–≤—ã –ª–æ–≥–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤ —Ñ–∞–π–ª–µ –≤—ã—à–µ.\n\n"
                "–í —Ç–µ—Å—Ç–µ –≤—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç–µ –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –ø–æ–Ω—è—Ç–∏—è - —ç—Ç–æ —Å–¥–µ–ª–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å "
                "—á–∏—Å—Ç—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –±–µ–∑ –≤–ª–∏—è–Ω–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π.\n\n"
                "*–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞*:\n\n"
                "1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"
                "2. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —É—Å–ª–æ–≤–∏–µ –≤ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É\n"
                "3. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å–ª–æ–≤–∏—é\n"
                "4. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω—ã–º–∏, –Ω–æ –Ω–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–æ—Å—ã–ª–æ–∫\n\n"
                "–£–¥–∞—á–∏ —Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞! –î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –Ω–∞ 22 –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ 30.\n\n"
                "–ß—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø, –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –Ω–∞ –ª–æ–≥–∏–∫—É."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="logic_test_start")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=brief_content,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            context.user_data["content_message_id"] = message.message_id
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
            try:
                await query.delete_message()
            except Exception as e:
                logger.error(f"Error deleting old message: {e}")
            
        except FileNotFoundError:
            logger.error(f"File not found: {docx_path}")
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ç–µ—Å—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
            return CandidateStates.MAIN_MENU
        except Exception as e:
            logger.error(f"Error sending logic test materials: {e}")
            return await send_main_menu(update, context, edit=True)
            
        return CandidateStates.LOGIC_TEST
    
    # Handler for starting the logic test
    elif query.data == "logic_test_start":
        # Show warning before starting the test
        warning_message = (
            "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> ‚ö†Ô∏è\n\n" +
            "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞ –Ω–∞ –ª–æ–≥–∏–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏. " +
            "<b>–î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –Ω–∞ 22 –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ 30.</b>\n\n" +
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç?"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —è –≥–æ—Ç–æ–≤", callback_data="confirm_logic_test")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data="logic_test")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(warning_message, reply_markup=reply_markup, parse_mode='HTML')
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            await query.message.reply_text(warning_message, reply_markup=reply_markup, parse_mode='HTML')
            
        return CandidateStates.LOGIC_TEST_PREPARE
        
    # Handler for confirming the logic test
    elif query.data == "confirm_logic_test":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç
        user_id = update.effective_user.id
        user_test_results = db.get_user_test_results(user_id)
        
        # –ï—Å–ª–∏ —Ç–µ—Å—Ç —É–∂–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω (—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ), –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –ø–µ—Ä–µ—Å–¥–∞–≤–∞—Ç—å
        if "logic_test_result" in user_test_results:
            await query.edit_message_text(
                "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
            return CandidateStates.MAIN_MENU
            
        # Load test questions
        test_data = load_test_questions("logic_test.json")
        if not test_data:
            try:
                await query.edit_message_text(
                    "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                    ])
                )
            except Exception as e:
                logger.error(f"Error editing message: {e}")
                await query.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return CandidateStates.MAIN_MENU
        
        # Store test data in context
        context.user_data["current_test"] = "logic_test_result"
        context.user_data["test_data"] = test_data
        context.user_data["current_question"] = 0
        context.user_data["correct_answers"] = 0
        
        # Send the first question by editing the current message
        try:
            await send_test_question(update, context, edit_message=True)
        except Exception as e:
            logger.error(f"Error editing message for test: {e}")
            # If editing fails, send as a new message
            await send_test_question(update, context, edit_message=False)
        
        return CandidateStates.LOGIC_TEST_TESTING
    
    # Contact developers - FIX: emoji display issue
    elif query.data == "contact_developers":
        # Edit the message to include the return button
        keyboard = [
            [InlineKeyboardButton("üìû –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", url="https://t.me/+iJCNlqsPgO0wN2Yy")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error updating message: {e}")
            await query.message.reply_text(
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=reply_markup
            )
        
        return CandidateStates.MAIN_MENU
    
    # Handler for preparation_materials
    elif (query.data == "preparation_materials" and "preparation_materials" in unlocked_stages) or admin_mode and query.data == "preparation_materials":
        # First, send the video file
        try:
            # Send a message that video is loading
            await query.edit_message_text(
                "–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                reply_markup=None
            )
            
            # Send the video as a separate message
            video_path = "materials/materials_for_prepare.mp4"
            with open(video_path, 'rb') as video:
                video_message = await context.bot.send_video(
                    chat_id=update.effective_chat.id,
                    video=video,
                    caption="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"
                )
            
            # Now, send the survey question
            survey_data = load_test_questions("materials_for_prepare_survey.json")
            if not survey_data or not isinstance(survey_data, dict):
                await update.effective_chat.send_message(
                    "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
                return await send_main_menu(update, context)
            
            # Create keyboard with survey options
            keyboard = []
            context.user_data["survey_selected_options"] = []
            
            for i, option in enumerate(survey_data["options"]):
                # For multiple choice, we'll use a different callback format
                keyboard.append([InlineKeyboardButton(
                    f"‚òê {option}", 
                    callback_data=f"survey_option_{i}"
                )])
            
            # Add submit button at the bottom
            keyboard.append([InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data="submit_survey")])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Store the survey options for reference
            context.user_data["survey_options"] = survey_data["options"]
            context.user_data["survey_multiple_choice"] = survey_data.get("multiple_choice", False)
            
            # Send as a new message
            survey_message = await update.effective_chat.send_message(
                text=f"{survey_data['question']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                reply_markup=reply_markup
            )
            
            # Store the survey message ID
            context.user_data["survey_message_id"] = survey_message.message_id
            
        except FileNotFoundError:
            logger.error(f"Video file not found: {video_path}")
            await update.effective_chat.send_message(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            return await send_main_menu(update, context)
        except Exception as e:
            logger.error(f"Error sending preparation materials: {e}")
            await update.effective_chat.send_message(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return await send_main_menu(update, context)
        
        return CandidateStates.PREPARATION_MATERIALS
    
    # Handle survey option selection (multiple choice)
    elif query.data.startswith("survey_option_"):
        try:
            option_index = int(query.data.split("_")[-1])
            survey_options = context.user_data.get("survey_options", [])
            selected_options = context.user_data.get("survey_selected_options", [])
            
            if option_index in selected_options:
                # Deselect this option
                selected_options.remove(option_index)
            else:
                # Select this option
                selected_options.append(option_index)
            
            # Update user data
            context.user_data["survey_selected_options"] = selected_options
            
            # Rebuild keyboard with updated selection status
            keyboard = []
            for i, option in enumerate(survey_options):
                # Show checkmark for selected options, empty box for unselected
                prefix = "‚òë" if i in selected_options else "‚òê"
                keyboard.append([InlineKeyboardButton(
                    f"{prefix} {option}", 
                    callback_data=f"survey_option_{i}"
                )])
            
            # Add submit button at the bottom
            keyboard.append([InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data="submit_survey")])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Update the message with the new keyboard
            await query.edit_message_reply_markup(reply_markup)
            
        except Exception as e:
            logger.error(f"Error handling survey option selection: {e}")
        
        return CandidateStates.PREPARATION_MATERIALS
    
    # Handle survey submission
    elif query.data == "submit_survey":
        selected_options = context.user_data.get("survey_selected_options", [])
        survey_options = context.user_data.get("survey_options", [])
        
        # Construct a string with the selected options
        if selected_options:
            selected_text = "\n".join([f"- {survey_options[i]}" for i in selected_options])
            response_text = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã!\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n{selected_text}"
        else:
            response_text = "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞. –û—Ç–≤–µ—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
        
        # Save survey results to database if needed
        # Here we would typically save the results to DB
        user_id = update.effective_user.id
        
        # Unlock the next stage (take_test)
        db.unlock_stage(user_id, "take_test")
        
        # Update the message with confirmation and return button
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(
                response_text + "\n\n–°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error updating survey message: {e}")
            await update.effective_chat.send_message(
                response_text + "\n\n–°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
                reply_markup=reply_markup
            )
        
        return CandidateStates.MAIN_MENU
    
    # Handler for take_test button
    elif (query.data == "take_test" and "take_test" in unlocked_stages) or admin_mode and query.data == "take_test":
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç
            user_id = update.effective_user.id
            user_test_results = db.get_user_test_results(user_id)
            
            # –ï—Å–ª–∏ —Ç–µ—Å—Ç —É–∂–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω (—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ), –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –ø–µ—Ä–µ—Å–¥–∞–≤–∞—Ç—å
            if "take_test_result" in user_test_results:
                await query.edit_message_text(
                    "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                    ])
                )
                return CandidateStates.MAIN_MENU
                
            # Load the task description
            task_content = load_text_content("past_the_test.txt")
            
            # Show the task to the user
            keyboard = [
                [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data="submit_solution")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                await query.edit_message_text(
                    task_content,
                    reply_markup=reply_markup
                )
                context.user_data["content_message_id"] = query.message.message_id
            except Exception as e:
                logger.error(f"Error editing message: {e}")
                # If editing fails, send as a new message
                message = await update.effective_chat.send_message(
                    text=task_content,
                    reply_markup=reply_markup
                )
                context.user_data["content_message_id"] = message.message_id
                
            # Set up the context for solution submission
            context.user_data["awaiting_solution"] = True
            
        except Exception as e:
            logger.error(f"Error handling take_test button: {e}")
            await update.effective_chat.send_message(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return await send_main_menu(update, context)
            
        return CandidateStates.TAKE_TEST
    
    # Handler for submission of the solution
    elif query.data == "submit_solution":
        if "awaiting_solution" not in context.user_data or not context.user_data["awaiting_solution"]:
            # If we're not awaiting a solution, return to main menu
            return await send_main_menu(update, context)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç
        user_id = update.effective_user.id
        user_test_results = db.get_user_test_results(user_id)
        
        # –ï—Å–ª–∏ —Ç–µ—Å—Ç —É–∂–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω (—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ), –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –ø–µ—Ä–µ—Å–¥–∞–≤–∞—Ç—å
        if "take_test_result" in user_test_results:
            await query.edit_message_text(
                "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
            return CandidateStates.MAIN_MENU
            
        # Text to send
        message_text = ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
                       "–í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò, –≤–∫–ª—é—á–∞—è –∑–∞–¥–∞–Ω–∏–µ –∏ —Ä–µ—à–µ–Ω–∏–µ.")
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        try:
            # Try to edit the current message
            await query.edit_message_text(
                message_text,
                reply_markup=reply_markup
            )
        except Exception as e:
            # If editing fails, send a new message
            logger.error(f"Error editing message: {e}")
            await query.message.reply_text(
                message_text,
                reply_markup=reply_markup
            )
        
        # Set the state to indicate we're waiting for a solution message
        context.user_data["awaiting_solution_message"] = True
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WAITING_FOR_SOLUTION —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(CandidateStates, 'WAITING_FOR_SOLUTION'):
            return CandidateStates.WAITING_FOR_SOLUTION
        else:
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º TAKE_TEST –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            logger.warning("CandidateStates.WAITING_FOR_SOLUTION not found, using TAKE_TEST instead")
            return CandidateStates.TAKE_TEST
    
    # Handler for interview_prep
    elif (query.data == "interview_prep" and "interview_prep" in unlocked_stages) or admin_mode and query.data == "interview_prep":
        content = load_text_content("interview_prep.txt")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
        max_length = 3000  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        first_part = content[:max_length] if len(content) > max_length else content
        
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="interview_prep_test")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await query.edit_message_text(
                first_part,
                reply_markup=reply_markup
            )
            context.user_data["content_message_id"] = query.message.message_id
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –±—ã–ª —Ä–∞–∑–±–∏—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏
            if len(content) > max_length:
                remaining_content = content[max_length:]
                await update.effective_chat.send_message(remaining_content)
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            # If editing fails, send as a new message
            message = await update.effective_chat.send_message(
                text=first_part,
                reply_markup=reply_markup
            )
            context.user_data["content_message_id"] = message.message_id
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –±—ã–ª —Ä–∞–∑–±–∏—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏
            if len(content) > max_length:
                remaining_content = content[max_length:]
                await update.effective_chat.send_message(remaining_content)
            
        return CandidateStates.INTERVIEW_PREP
    
    # Handler for interview_prep_test
    elif query.data == "interview_prep_test":
        # Show warning before starting the test
        warning_message = (
            "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> ‚ö†Ô∏è\n\n" +
            "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏. " +
            "<b>–ï—Å–ª–∏ –≤—ã –Ω–µ –ø—Ä–æ–π–¥–µ—Ç–µ —É—Å–ø–µ—à–Ω–æ —Ö–æ—Ç—è –±—ã –ø–æ–ª–æ–≤–∏–Ω—É –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤, –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.</b>\n\n" +
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç?"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —è –≥–æ—Ç–æ–≤", callback_data="confirm_interview_prep_test")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data="interview_prep")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(warning_message, reply_markup=reply_markup, parse_mode='HTML')
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            # If editing fails, send as a new message
            await query.message.reply_text(warning_message, reply_markup=reply_markup, parse_mode='HTML')
            
        return CandidateStates.INTERVIEW_PREP
    
    # Handler for confirm_interview_prep_test
    elif query.data == "confirm_interview_prep_test":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç
        user_id = update.effective_user.id
        user_test_results = db.get_user_test_results(user_id)
        
        # –ï—Å–ª–∏ —Ç–µ—Å—Ç —É–∂–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω (—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ), –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –ø–µ—Ä–µ—Å–¥–∞–≤–∞—Ç—å
        if "interview_prep_test" in user_test_results:
            await query.edit_message_text(
                "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
            return CandidateStates.MAIN_MENU
            
        # Load test questions
        test_data = load_test_questions("interview_prep_test.json")
        if not test_data:
            await query.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return CandidateStates.MAIN_MENU
        
        # Store test data in context
        context.user_data["current_test"] = "interview_prep_test"
        context.user_data["test_data"] = test_data
        context.user_data["current_question"] = 0
        context.user_data["correct_answers"] = 0
        
        # Send the first question by editing the current message
        try:
            await send_test_question(update, context, edit_message=True)
        except Exception as e:
            logger.error(f"Error editing message for test: {e}")
            # If editing fails, send as a new message
            await send_test_question(update, context, edit_message=False)
        
        return CandidateStates.INTERVIEW_PREP_TEST
    
    # Handler for scheduled_interview button
    elif (query.data == "schedule_interview" and "schedule_interview" in unlocked_stages) or admin_mode and query.data == "schedule_interview":
        # Get the test results for the user
        user_test_results = db.get_user_test_results(user_id)
        
        # –í —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ context.user_data
        if admin_mode:
            admin_test_results = context.user_data.get("admin_test_results", {})
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–∑ –ë–î, –Ω–æ admin_test_results –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            display_test_results = {**user_test_results, **admin_test_results}
        else:
            display_test_results = user_test_results
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        test_names = {
            "primary_test": "–ü–µ—Ä–≤–∏—á–Ω—ã–π —Ñ–∞–π–ª",
            "where_to_start_test": "–° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å",
            "logic_test_result": "–¢–µ—Å—Ç –Ω–∞ –ª–æ–≥–∏–∫—É",
            "take_test_result": "–ü—Ä–æ–π—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ", 
            "interview_prep_test": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é"
        }
        
        # –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö
        total_tests = len(test_names)  # –í—Å–µ–≥–¥–∞ 5 —Ç–µ—Å—Ç–æ–≤
        passed_tests = 0
        
        test_status = []
        for test_id, display_name in test_names.items():
            if test_id in display_test_results and display_test_results[test_id]:
                passed_tests += 1
                status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω"
            else:
                status = "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω"
            test_status.append(f"{display_name}: {status}")
        
        # Create a message with test results
        test_results_message = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤:\n\n"
        test_results_message += "\n".join(test_status)
        test_results_message += f"\n\n–í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ {passed_tests} –∏–∑ {total_tests} —Ç–µ—Å—Ç–æ–≤."
        
        # Check if the user has passed at least 3 out of 5 tests
        if passed_tests >= 3:  # More than 50% requirement
            # Get interview status to check if user already has a pending request
            interview_status = db.get_interview_status(user_id)
            
            if interview_status and interview_status['status'] == 'pending':
                # User already has a pending request
                message = (
                    f"{test_results_message}\n\n"
                    "üïí –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π –æ—Ç–≤–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.\n\n"
                    f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å: {interview_status['preferred_day']}\n"
                    f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {interview_status['preferred_time']}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞."
                )
                keyboard = [
                    [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ]
            elif interview_status and interview_status['status'] == 'approved':
                # Interview already approved
                message = (
                    f"{test_results_message}\n\n"
                    "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
                    f"–û—Ç–≤–µ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞: {interview_status['recruiter_response']}\n\n"
                    "–•–æ—Ä–æ—à–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é!"
                )
                keyboard = [
                    [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ]
            elif interview_status and interview_status['status'] == 'rejected':
                # Interview was rejected, allow to make new request
                message = (
                    f"{test_results_message}\n\n"
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç—Ç–∞–ø—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é!\n\n"
                    "–í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω:\n"
                    f"{interview_status['recruiter_response']}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–µ –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è:"
                )
                keyboard = [
                    [InlineKeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="interview_day_–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")],
                    [InlineKeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫", callback_data="interview_day_–í—Ç–æ—Ä–Ω–∏–∫")],
                    [InlineKeyboardButton("–°—Ä–µ–¥–∞", callback_data="interview_day_–°—Ä–µ–¥–∞")],
                    [InlineKeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥", callback_data="interview_day_–ß–µ—Ç–≤–µ—Ä–≥")],
                    [InlineKeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞", callback_data="interview_day_–ü—è—Ç–Ω–∏—Ü–∞")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ]
                # Store that we're in interview scheduling mode
                context.user_data["scheduling_interview"] = True
            else:
                # No existing request, show schedule form
                message = (
                    f"{test_results_message}\n\n"
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç—Ç–∞–ø—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é!\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:"
                )
                keyboard = [
                    [InlineKeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="interview_day_–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")],
                    [InlineKeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫", callback_data="interview_day_–í—Ç–æ—Ä–Ω–∏–∫")],
                    [InlineKeyboardButton("–°—Ä–µ–¥–∞", callback_data="interview_day_–°—Ä–µ–¥–∞")],
                    [InlineKeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥", callback_data="interview_day_–ß–µ—Ç–≤–µ—Ä–≥")],
                    [InlineKeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞", callback_data="interview_day_–ü—è—Ç–Ω–∏—Ü–∞")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ]
                # Store that we're in interview scheduling mode
                context.user_data["scheduling_interview"] = True
        else:
            message = (
                test_results_message + "\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        
        # Send the message to the user
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(
                message,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            await update.effective_chat.send_message(
                message,
                reply_markup=reply_markup
            )
        
        return CandidateStates.SCHEDULE_INTERVIEW
    
    # Handle interview day selection
    elif query.data.startswith("interview_day_"):
        selected_day = query.data.replace("interview_day_", "")
        context.user_data["interview_day"] = selected_day
        
        # Show time selection buttons
        message = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–Ω—å: {selected_day}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:"
        keyboard = [
            [InlineKeyboardButton("10:00 - 12:00", callback_data="interview_time_10:00 - 12:00")],
            [InlineKeyboardButton("12:00 - 14:00", callback_data="interview_time_12:00 - 14:00")],
            [InlineKeyboardButton("14:00 - 16:00", callback_data="interview_time_14:00 - 16:00")],
            [InlineKeyboardButton("16:00 - 18:00", callback_data="interview_time_16:00 - 18:00")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è", callback_data="schedule_interview")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(
                message,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            await update.effective_chat.send_message(
                message,
                reply_markup=reply_markup
            )
        
        return CandidateStates.SCHEDULE_INTERVIEW
    
    # Handle interview time selection
    elif query.data.startswith("interview_time_"):
        selected_time = query.data.replace("interview_time_", "")
        selected_day = context.user_data.get("interview_day", "–ù–µ —É–∫–∞–∑–∞–Ω")
        
        # Save to context temporarily
        context.user_data["interview_time"] = selected_time
        
        # Show confirmation
        message = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n\n"
            f"–î–µ–Ω—å: {selected_day}\n"
            f"–í—Ä–µ–º—è: {selected_time}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ:"
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_interview_request")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="interview_day_" + selected_day)],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–Ω—å", callback_data="schedule_interview")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(
                message,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            await update.effective_chat.send_message(
                message,
                reply_markup=reply_markup
            )
        
        return CandidateStates.SCHEDULE_INTERVIEW
    
    # Handle interview request confirmation
    elif query.data == "confirm_interview_request":
        user_id = update.effective_user.id
        selected_day = context.user_data.get("interview_day", "–ù–µ —É–∫–∞–∑–∞–Ω")
        selected_time = context.user_data.get("interview_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        
        # Import handle_interview_request function from candidate_bot
        from candidate_bot import handle_interview_request
        
        # Submit interview request and send notification to recruiter
        await handle_interview_request(user_id, selected_day, selected_time)
        
        # Show confirmation message
        message = (
            "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
            f"–î–µ–Ω—å: {selected_day}\n"
            f"–í—Ä–µ–º—è: {selected_time}\n\n"
            "–†–µ–∫—Ä—É—Ç–µ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. "
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω."
        )
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(
                message,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            await update.effective_chat.send_message(
                message,
                reply_markup=reply_markup
            )
        
        # Clear interview scheduling data
        if "interview_day" in context.user_data:
            del context.user_data["interview_day"]
        if "interview_time" in context.user_data:
            del context.user_data["interview_time"]
        if "scheduling_interview" in context.user_data:
            del context.user_data["scheduling_interview"]
        
        return CandidateStates.MAIN_MENU
    
    # Back to menu from any section
    elif query.data == "back_to_menu":
        # –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        return await send_main_menu(update, context, edit=True)
    
    # Default - return to main menu
    return await send_main_menu(update, context, edit=True)
